spe <- read.delim('D:/ChengYang/lala_400_spe.txt', row.names = 1)
View(spe)
colnames(spe)
colnames(spe)[111]
colnames(spe)[112]
spe <- spe[, 1:111]
env <- read.delim('D:/ChengYang/lala_400_env.txt', row.names = 1)
View(env)
trait <- read.delim('D:/ChengYang/lala_woody_traits.txt', row.names = 1)
View(trait)
library(weimea)
?weimea
?cwm
View(spe)
View(trait)
trait <- trait[, -1]
View(trait)
sort(trait$species_abbrev)
?sort
order(trait$species_abbrev)
?order
trait <- trait[order(trait$species_abbrev), ]
order(trait$species_abbrev)
order(trait$species_abbrev) == 1:101
order(colnames(spe))
sum(order(colnames(spe)) == 1:101)
order(colnames(spe)) == 1:101
order(colnames(spe)) == 1:111
spe <- spe[, order(colnames(spe))]
sum(order(colnames(spe)) == 1:111)
a <- vector(1:5, mode = 'cha')
a <- as.vector(1:5, mode = 'cha')
a <- as.vector(1:5, mode = 'character')
b <- as.vector(1:3, mode = 'character')
a == b
colnames(spe) == trait$species_abbrev
a %in% b
colnames(spe) %in% trait$species_abbrev
spe <- spe[, colnames(spe) %in% trait$species_abbrev]
colnames(spe) %in% trait$species_abbrev
trait$species_abbrev %in% colnames(spe)
trait <- trait[trait$species_abbrev %in% colnames(spe), ]
trait$species_abbrev == colnames(spe)
sum(trait$species_abbrev == colnames(spe))
?cwm
cwm(spe, trait)
class(trait)
str(trait)
cwm(spe, trait[, -1])
LLS_cwm <- cwm(spe, trait[, -1])
View(LLS_cwm)
View(env)
lm(env$folded_aspect_NE ~ LLS_cwm$SLA)
NE_SLA <- lm(env$folded_aspect_NE ~ LLS_cwm$SLA)
anova(NE_SLA)
anova(lm(env$elevation ~ LLS_cwm$SLA))
anova(lm(env$pH_H2O ~ LLS_cwm$SLA))
anova(lm(env$total_N ~ LLS_cwm$SLA))
anova(lm(env$CN_ratio ~ LLS_cwm$SLA))
anova(lm(env$Mg ~ LLS_cwm$SLA))
anova(lm(env$Mn ~ LLS_cwm$SLA))
anova(lm(env$Ca ~ LLS_cwm$SLA))
anova(lm(env$Cu ~ LLS_cwm$SLA))
anova(lm(env$K ~ LLS_cwm$SLA))
anova(lm(env$P ~ LLS_cwm$SLA))
ei <- round(resid(lm(env$elevation ~ LLS_cwm$SLA)))
qqnorm(ei,xlim=c(-4,4),c(-4,4))
qqline(ei)
plot(lm(env$elevation ~ LLS_cwm$SLA))
ei <- round(resid(lm(env$elevation ~ LLS_cwm$SLA)))
qqnorm(ei,xlim=c(-4,4),c(-4,4))
shapiro.test(ei)
car::durbinWatsonTest(lm(env$elevation ~ LLS_cwm$SLA), max.lag=5)
lmtest::bptest(temp.lm)
lmtest::bptest(lm(env$elevation ~ LLS_cwm$SLA))
car::ncvTest(lm(env$elevation ~ LLS_cwm$SLA))
library(vegan)
library(dplyr)
library(ggplot2)
library(DNCImper)
setwd("P:\\Personal\\Andy\\Thesis\\DNCI\\PER-SIMPER-DNCI_Tutorial-master")
load("Data_Matrix_Tutorial.RData") #Data already loaded with DNCImper package. Can be call like that: DNCImper::Matrix
load("Data_Group_Turorial.RData")
load("Data_Matrix_Tutorial_4Groups.RData")
load("Data_Group4_Tutorial.RData")
X3 <- DNCI_multigroup(Matrix_4groups, Group4)
source("DNCI_multigroup.R")
X3 <- DNCI_multigroup(Matrix_4groups, Group4)
source("DNCI_ses.R")
################################################################################
###### DNCI usage for more than 2 groups #######################################
################################################################################
source("PerSIMPER.R")
X3 <- DNCI_multigroup(Matrix_4groups, Group4)
X3
matrixSIMP = matrixSIMP
matrixSIMP = matrix
Groups = Group4
matrixSIMP = Matrix_4groups
leg = FALSE
count = TRUE
dataTYPE = "prab"
Nperm=1000
AnaSimp <- simper(matrixSIMP, Groups)   # summary(AnaSimp)
AnaSimp
summary(AnaSimp)
length(AnaSimp)
#Number of possible pairs of groups
Nbr_Pairs <- seq(1:length(AnaSimp))
matrixSIMP[1,]
Contribution <- rep(0, length(matrixSIMP[1,]))
AnaSimp[[1]]
AnaSimp[[1]]$average
for(i in 1:length(AnaSimp))
{
Contribution <- Contribution + AnaSimp[[i]]$average
}
Pourcent_Contribution <- sort(((Contribution)/sum(Contribution))*100, decreasing = TRUE)
dp2 <- permatfull(matrixSIMP, fixedmar = "both", mtype = dataTYPE,  times = Nperm) #prab
# set.seed(123456)  # add by jjwang
dp3 <- permatfull(matrixSIMP, fixedmar ="rows" , mtype = dataTYPE, times = Nperm)  #prab
#Randomization of the matrixSIMP matrix ; permatfull need to be used in order to swap cells under
#various conditions. permatswap only allow permutation with both fixed rows and fixed columns count.
#mtype = "prab" is used for presence/absence data, this setting must be changed with "count" if abundance
#analysis are performed.
df2 <- matrix(nrow = Nperm, ncol = length(matrixSIMP[2,]))
df3 <- matrix(nrow = Nperm, ncol = length(matrixSIMP[2,]))
df4 <- matrix(nrow = Nperm, ncol = length(matrixSIMP[2,]))
#Generating matrices that will store the results (the ranked contribution of species to the OAD)
#of the 1000 permutations of the original matrix
jj = 0
i = 1
#Screen output of the number of iterations performed.
#This option is used to indicate if the permutation function is unable to swap the matrix cells.
#This incapacity is usually the result of a matrix too sparse in data (too many cells at 0).
repeat {
v <- T
dp4 <- permatfull(matrixSIMP, fixedmar = "columns", mtype = dataTYPE, times = 1)  #prab
for(j in 1:length(dp4$perm[[1]][,2])) {
if(sum(dp4$perm[[1]][j,]) == 0){v <- FALSE}
}
if(v == TRUE) break
}
dp2
dp2$perm
simp2 <- simper(dp2$perm[[i]], Groups)
simp3 <- simper(dp3$perm[[i]], Groups)
simp4 <- simper(dp4$perm[[1]], Groups)
simp4
imp2[[1]]
simp2[[1]]
df2[i,] <- simp2[[1]]$average
df3[i,] <- simp3[[1]]$average
df4[i,] <- simp4[[1]]$average
for(m in 2:length(simp2))
{
df2[i,] <- df2[i,] + simp2[[m]]$average
df3[i,] <- df3[i,] + simp3[[m]]$average
df4[i,] <- df4[i,] + simp4[[m]]$average
}
X4 <- PerSIMPER_overall(Matrix_4groups, Group4)
######################## OVERALL DNCI - PerSIMPER ##############################
############## COMPUTATION ON THE OVERALL DISSIMILARITY ########################
##################### BETWEEN MORE THAN 2 GROUPS ###############################
############## THIS ANALYSIS IS NOT BY PAIRS OF GROUPS #########################
################################################################################
source("PerSIMPER_Overall.R") #Explanation for arguments inside function files
source("DNCI_ses_overall.R")  #Explanation for arguments inside function files
source("DNCI_ses_overall_symmetrized.R")
X4 <- PerSIMPER_overall(Matrix_4groups, Group4)
X4
devtools::install_github("Corentin-Gibert-Paleontology/DNCImper")
install.packages("cli")
install.packages("cli")
install.packages("cli")
devtools::install_github("Corentin-Gibert-Paleontology/DNCImper")
install.packages("cli")
install.packages("cli")
install.packages("cli")
